{"name":"Si-scrape","tagline":"A Ruby script for scraping collection data from the Smithsonian Institution","body":"# si-scrape\r\n\r\nThis ruby script will scrape information from the web portal for the collections of the Smithsonian Institution and parsing it into easily-readable JSON. This is a quick and dirty solution for downloading structured data from the Smithsonian while they are finalizing a Linked Open Data implementation for their collections.\r\n\r\nThis README assumes basic knowledge of how to run a Ruby script from your command line. Beginner tutorials can be found for [Windows computers](http://www.editrocket.com/articles/ruby_windows.html) and [OS X](http://www.editrocket.com/articles/ruby_mac_os_x.html) You will also need to install the Ruby gems [Nokogiri](http://nokogiri.org/) and [ruby-progressbar](http://rubygems.org/gems/ruby-progressbar) ([Tutorials on adding Ruby gems](http://www.ruby-lang.org/en/libraries/)).\r\n\r\n## Generate your query URL\r\n\r\nEstablish your search parameters on the [SI collection portal](http://collections.si.edu/search/results.htm?q=). You can enter search keywords, as well as narrow your results by various parameters like `date`, `culture`, or `catalog record source` (this parameter is particularly helpful for limiting your search to a particular museum within the SI.) Once you have entered your terms, copy the URL from your browser's address bar.\r\n\r\nMy test query is looking for objects of the type `Works of Art` that feature the keyword `space`. The URL for this query looks like this: `http://collections.si.edu/search/results.htm?tag.cstype=all&q=space&fq=object_type:%22Works+of+art%22`\r\n\r\n## Run si-scrape.rb\r\n\r\nRun `ruby si-scrape.rb` and paste the copied URL when prompted. The script will begin to download from `collections.si.edu`, displaying a rough progress bar like this:\r\n\r\n````bash\r\n$ ruby si-scrape.rb \r\nEnter query URL: http://collections.si.edu/search/results.htm?tag.cstype=all&fq=object_type%3A%22Works+of+art%22\r\nLooking up query on collections.si.edu...\r\nPages of results: 704\r\n|===>>                                               | 6% Results scraped\r\n````\r\n\r\nAs each page of records are downloaded, they will be parsed into a JSON file in the same directory as the script (default file path: `output.json`). This script creates a [JSON](http://json.org) file instead of a CSV for two reasons:\r\n\r\n1. In order to accommodate the diverse metadata that are present in some Smithsonian object records, but not in others. A CSV file is best suited for rows of data that all share the same columns; this would not work for the output from `collections.si.edu`.\r\n2. Some fields, like those for `Topic` or `Type`, have more than one value, which JSON can handle with nested arrays; a CSV needs an additional delimiter character, and support for reading such complex CSVs is patchy at best.\r\n\r\nRecords will appear as such:\r\n\r\n````json\r\n{\r\n\"saam_1978.146.1\": {\r\n    \"Title\": \"Slaughterhouse Ruins at Aledo\",\r\n    \"Image\": \"http://americanart.si.edu/images/1978/1978.146.1_1a.jpg\",\r\n    \"Artist\": [\r\n      \"Gertrude Abercrombie, born Austin, TX 1909-died Chicago, IL 1977\"\r\n    ],\r\n    \"Medium\": [\r\n      \"oil on canvas\"\r\n    ],\r\n    \"Dimensions\": [\r\n      \"20 x 24 in. (50.9 x 61.0 cm)\"\r\n    ],\r\n    \"Type\": [\r\n      \"Painting\"\r\n    ],\r\n    \"Date\": [\r\n      \"1937\"\r\n    ],\r\n    \"Topic\": [\r\n      \"Landscape\",\r\n      \"Landscape\\\\Spain\\\\Aledo\",\r\n      \"Architecture Exterior\\\\ruins\",\r\n      \"Architecture Exterior\\\\industry\\\\slaughterhouse\"\r\n    ],\r\n    \"Credit Line\": [\r\n      \"Smithsonian American Art Museum, Gift of the Gertrude Abercrombie Trust\"\r\n    ],\r\n    \"Object number\": [\r\n      \"1978.146.1\"\r\n    ],\r\n    \"See more items in\": [\r\n      \"Smithsonian American Art Museum Collection\"\r\n    ],\r\n    \"Data Source\": [\r\n      \"Smithsonian American Art Museum\"\r\n    ],\r\n    \"Record ID\": [\r\n      \"saam_1978.146.1\"\r\n    ],\r\n    \"Visitor Tag(s)\": [\r\n      \"\\nNo tags yet, be the first!\\n\\nAdd Your Tags!\\n\"\r\n    ]\r\n  },\r\n}\r\n````\r\n\r\nEvery SI object comes with a unique ID (e.g. `saam_1978.146.1`), title (e.g. `Slaughterhouse Ruins at Aledo`), and image URL (n.b. sometimes this URL will lead to a blank image, however). Other elements could potentially have multiple values, and so they are stored as nested arrays in the JSON output, which can easily be parsed by [Ruby's JSON module](http://www.ruby-doc.org/stdlib-2.0/libdoc/json/rdoc/JSON.html) or other library of your choice.\r\n\r\n# To-Do\r\n\r\nFork/[contact me](http://matthewlincoln.net/about) with more suggestions for the project!\r\n\r\n***\r\n\r\n[Matthew D. Lincoln](http://matthewlincoln.net) | Ph.D Student, Department of Art History & Archaeology, University of Maryland, College Park\r\n","google":"UA-42379158-1","note":"Don't delete this file! It's used internally to help with page regeneration."}